name: "Release Branch Update"
description: "Tracks updates to existing release branches and sends notifications"
author: "augur-ai"

inputs:
  branch_name:
    description: "Branch to analyze for updates"
    required: false
    default: ${{ github.ref_name }}
  base_branch:
    description: "Base branch to compare against"
    required: false
    default: "main"
  api_url:
    description: "API URL for notification service"
    required: true
  api_key:
    description: "API Key for authentication"
    required: true
  feed_id:
    description: "Feed ID to post to"
    required: true
  repo:
    description: "Repository name (owner/repo)"
    required: false
    default: ${{ github.repository }}
  max_commits:
    description: "Maximum number of recent commits to include"
    required: false
    default: "50"
  notification_level:
    description: "Notification level (INFO, WARNING, ERROR)"
    required: false
    default: "INFO"

outputs:
  branch:
    description: "The branch that was analyzed"
    value: ${{ steps.get-commits.outputs.branch }}
  commit_list:
    description: "Formatted list of recent commits"
    value: ${{ steps.get-commits.outputs.commit_list }}
  post_id:
    description: "ID of the notification post created"
    value: ${{ steps.post-to-feed.outputs.post_id }}
  status_code:
    description: "HTTP status code from the API request"
    value: ${{ steps.post-to-feed.outputs.status_code }}

runs:
  using: "composite"
  steps:
    - name: Check commit author
      id: check-author
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          AUTHOR=$(git log -1 --format='%an')
          echo "Author of last commit: $AUTHOR"
          if [[ "$AUTHOR" == "GitHub Actions" || "$AUTHOR" == "github-actions" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping notification for GitHub Actions commit"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Processing commit by $AUTHOR"
          fi
        else
          echo "Not a push event, continuing"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Get merged branch commits
      id: get-commits
      if: steps.check-author.outputs.skip != 'true'
      shell: bash
      run: |
        BRANCH="${{ inputs.branch_name }}"
        BASE="${{ inputs.base_branch }}"
        echo "Processing update to branch: $BRANCH"

        # Find the merge base (common ancestor) between the current branch and base branch
        MERGE_BASE=$(git merge-base $BASE $BRANCH)
        echo "Merge base: $MERGE_BASE"

        # Get only commits that are in the branch but not in the base
        COMMITS=$(git log --no-merges --pretty=format:"%h|%s|%an|%ai" $MERGE_BASE..$BRANCH)

        # Limit to max_commits if needed
        if [ -n "$COMMITS" ]; then
          COMMITS=$(echo "$COMMITS" | head -n ${{ inputs.max_commits }})
        fi

        # Format the commit message
        COMMIT_LIST="| Commit | Description | Author | PR |\n|--------|-------------|--------|----|\n"
        REPO="${{ inputs.repo }}"

        while IFS= read -r line; do
          if [ -z "$line" ]; then
            continue
          fi
          
          # Parse commit details
          HASH=$(echo "$line" | cut -d'|' -f1)
          SUBJECT=$(echo "$line" | cut -d'|' -f2)
          AUTHOR=$(echo "$line" | cut -d'|' -f3)
          DATE=$(echo "$line" | cut -d'|' -f4 | cut -d' ' -f1)
          
          echo "Processing commit: $HASH - $SUBJECT"
          
          # Check for PR numbers
          PR_NUM=$(echo "$SUBJECT" | grep -oE '#[0-9]+' | head -n 1 | sed 's/#//' || echo "")
          
          if [ -n "$PR_NUM" ]; then
            PR_LINK="[#$PR_NUM](https://github.com/$REPO/pull/$PR_NUM)"
          else
            PR_LINK="-"
          fi
          
          # Format commit subject
          FORMATTED_SUBJECT=$(echo "$SUBJECT" | sed 's/`/\\`/g')
          
          # Create row in markdown table
          COMMIT_LIST="$COMMIT_LIST| [$HASH](https://github.com/$REPO/commit/$HASH) | $FORMATTED_SUBJECT | $AUTHOR | $PR_LINK |\n"
        done <<< "$COMMITS"

        # Save to output with proper escaping
        COMMIT_LIST="${COMMIT_LIST//'%'/'%25'}"
        COMMIT_LIST="${COMMIT_LIST//$'\n'/'%0A'}"
        COMMIT_LIST="${COMMIT_LIST//$'\r'/'%0D'}"
        echo "commit_list=$COMMIT_LIST" >> $GITHUB_OUTPUT

        # Save branch name
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "Finished processing commits."

    - name: Prepare notification content
      id: content
      if: steps.check-author.outputs.skip != 'true'
      shell: bash
      run: |
        # Format the date using a more compatible approach
        CURRENT_DATE=$(date +"%Y-%m-%d")

        # Create body with commit information
        BODY="## âš¡ Release Branch Updated: ${{ steps.get-commits.outputs.branch }}\n\n"
        BODY+="**Repository:** [${{ inputs.repo }}](https://github.com/${{ inputs.repo }})\n\n"
        BODY+="**Date:** $CURRENT_DATE\n\n"
        BODY+="### ðŸ“‹ Branch Commits:\n\n"
        BODY+="${{ steps.get-commits.outputs.commit_list }}\n\n"
        BODY+="---\n\n"
        BODY+="*This notification was automatically generated by the Release Branch Update action.*"

        # Save to outputs with proper escaping
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "body=$BODY" >> $GITHUB_OUTPUT

    - name: Post update to feed
      id: post-to-feed
      if: steps.check-author.outputs.skip != 'true'
      uses: augur-ai/augur-actions/actions/post-feed-update@main
      with:
        api_url: ${{ inputs.api_url }}
        api_key: ${{ inputs.api_key }}
        feed_id: ${{ inputs.feed_id }}
        body: ${{ steps.content.outputs.body }}
        level: ${{ inputs.notification_level }}
        topics: '{"release_branch": true, "update": true}'
