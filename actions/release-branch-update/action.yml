name: "Release Branch Update"
description: "Tracks updates to merged pull requests on release branches and sends notifications"
author: "augur-ai"

inputs:
  api_url:
    description: "Notification service API URL"
    required: true
  api_key:
    description: "API Key for authentication"
    required: true
  feed_id:
    description: "Feed ID to post to"
    required: true
  repo:
    description: "Repository name (owner/repo)"
    required: false
    default: ${{ github.repository }}
  max_commits:
    description: "Maximum number of recent commits to include"
    required: false
    default: "50"
  notification_level:
    description: "Notification level (INFO, WARNING, ERROR)"
    required: false
    default: "INFO"

outputs:
  post_id:
    description: "ID of the notification post created"
    value: ${{ steps.post-to-feed.outputs.post_id }}
  status_code:
    description: "HTTP status code from the API request"
    value: ${{ steps.post-to-feed.outputs.status_code }}

runs:
  using: "composite"
  steps:
    - name: Install GitHub CLI
      run: |
        sudo apt-get update && sudo apt-get install -y gh
      shell: bash

    - name: Determine PR number and author
      id: pr-info
      shell: bash
      run: |
        PR_NUM=$(jq .pull_request.number < "$GITHUB_EVENT_PATH")
        AUTHOR=$(jq -r .pull_request.user.login < "$GITHUB_EVENT_PATH")
        echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        # Skip if authored by a bot or GitHub Actions
        if [[ "$AUTHOR" =~ (dependabot\[bot\]|github-actions) ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Fetch PR commits
      id: get-commits
      if: steps.pr-info.outputs.skip != 'true'
      shell: bash
      run: |
        PR_NUM=${{ steps.pr-info.outputs.pr_number }}
        REPO="${{ inputs.repo }}"
        echo "Fetching commits for PR #$PR_NUM on $REPO"

        # Retrieve commits via GitHub CLI
        COMMITS=$(gh pr view "$PR_NUM" --repo "$REPO" --json commits \
                   --jq '.commits[] | "\(.oid)|\(.message|split("\n")[0])|\(.author.login)//\(.committedDate)"')

        # Limit to max_commits
        if [ -n "$COMMITS" ]; then
          COMMITS=$(echo "$COMMITS" | head -n ${{ inputs.max_commits }})
        fi

        # Build markdown table header
        TABLE="| Commit | Description | Author | Date |\n|--------|-------------|--------|------|\n"
        while IFS= read -r line; do
          [[ -z "$line" ]] && continue
          IFS="|" read -r HASH SUBJECT AUTHOR_DATE <<< "$line"
          # AUTHOR_DATE contains "author//date"
          AUTHOR=${AUTHOR_DATE%%//*}
          DATE=${AUTHOR_DATE##*//}
          SAFE_SUBJECT=${SUBJECT//`/\\`}
          TABLE+="| [$HASH](https://github.com/$REPO/commit/$HASH) | $SAFE_SUBJECT | $AUTHOR | ${DATE%%T*} |\n"
        done <<< "$COMMITS"

        # Escape for composite output
        ESCAPED=$(printf '%s' "$TABLE" | sed 's/%/%25/g; s/$/%0A/g')
        echo "commit_list=$ESCAPED" >> $GITHUB_OUTPUT

    - name: Prepare notification content
      id: content
      if: steps.pr-info.outputs.skip != 'true'
      shell: bash
      run: |
        PR_NUM=${{ steps.pr-info.outputs.pr_number }}
        DATE=$(date +"%Y-%m-%d")
        BODY="## âš¡ Release Branch Update: PR #${PR_NUM}\n\n"
        BODY+="**Repository:** [${{ inputs.repo }}](https://github.com/${{ inputs.repo }})\n\n"
        BODY+="**Date:** $DATE\n\n"
        BODY+="### ðŸ“‹ Merged Commits:\n\n${{ steps.get-commits.outputs.commit_list }}\n---\n"
        ESCAPED_BODY=$(printf '%s' "$BODY" | sed 's/%/%25/g; s/$/%0A/g')
        echo "body=$ESCAPED_BODY" >> $GITHUB_OUTPUT

    - name: Post update to feed
      if: steps.pr-info.outputs.skip != 'true'
      id: post-to-feed
      uses: augur-ai/augur-actions/actions/post-feed-update@main
      with:
        api_url: ${{ inputs.api_url }}
        api_key: ${{ inputs.api_key }}
        feed_id: ${{ inputs.feed_id }}
        body: ${{ steps.content.outputs.body }}
        level: ${{ inputs.notification_level }}
        topics: '{"release_branch": true, "update": true}'
