name: "Augur Security Scan"
description: "Universal security scanner with CodeQL auto-detection and JSON webhook notifications"
author: "augur-ai"

inputs:
  api_url:
    description: "Base URL for the Augur API"
    required: false
  api_key:
    description: "API key for authentication"
    required: false
  feed_id:
    description: "Feed ID for notifications"
    required: false
  languages:
    description: "Languages to scan (auto-detect if not specified)"
    required: false
    default: ""
  fail_on_issues:
    description: "Fail workflow if security issues found"
    required: false
    default: "false"

outputs:
  results_count:
    description: "Number of security findings"
    value: ${{ steps.scan.outputs.results_count }}
  status:
    description: "Scan status (success/failed)"
    value: ${{ steps.scan.outputs.status }}
  languages_detected:
    description: "Languages that were scanned"
    value: ${{ steps.scan.outputs.languages_detected }}
  feed_status:
    description: "Augur feed update status"
    value: ${{ steps.feed-update.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      id: init
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.languages }} # Auto-detects if empty
      continue-on-error: true

    - name: Autobuild
      id: autobuild
      uses: github/codeql-action/autobuild@v3
      continue-on-error: true

    - name: Perform CodeQL Analysis
      id: analyze
      uses: github/codeql-action/analyze@v3
      with:
        output: sarif-results
        upload: false
      continue-on-error: true

    - name: Process Results and Send Webhook
      id: scan
      shell: bash
      run: |
        echo "üîí Processing Augur Security Scan Results..."

        # Check if CodeQL steps succeeded
        CODEQL_SUCCESS="true"
        if [[ "${{ steps.init.outcome }}" != "success" || "${{ steps.autobuild.outcome }}" != "success" || "${{ steps.analyze.outcome }}" != "success" ]]; then
          CODEQL_SUCCESS="false"
          echo "‚ö†Ô∏è CodeQL analysis failed or was skipped - using fallback scan"
          echo "  - Init: ${{ steps.init.outcome }}"
          echo "  - Autobuild: ${{ steps.autobuild.outcome }}"
          echo "  - Analyze: ${{ steps.analyze.outcome }}"
        fi

        # Find SARIF files
        SARIF_FILES=$(find sarif-results -name "*.sarif" 2>/dev/null || echo "")

        if [[ -z "$SARIF_FILES" || "$CODEQL_SUCCESS" == "false" ]]; then
          echo "‚ö†Ô∏è No SARIF files found or CodeQL failed - using fallback scan"
          
          # Simple fallback scan
          TOTAL_FILES=0
          TOTAL_FINDINGS=0
          LANGUAGES_FOUND=""
          
          # Check for different languages
          if find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | head -1 | grep -q .; then
            JS_FILES=$(find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | wc -l)
            TOTAL_FILES=$((TOTAL_FILES + JS_FILES))
            LANGUAGES_FOUND="javascript"
            
            # Basic JS security patterns
            EVAL_COUNT=$(grep -r "eval(" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l || echo "0")
            INNERHTML_COUNT=$(grep -r "innerHTML" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l || echo "0")
            TOTAL_FINDINGS=$((TOTAL_FINDINGS + EVAL_COUNT + INNERHTML_COUNT))
          fi
          
          if find . -name "*.py" | head -1 | grep -q .; then
            PY_FILES=$(find . -name "*.py" | wc -l)
            TOTAL_FILES=$((TOTAL_FILES + PY_FILES))
            [[ -n "$LANGUAGES_FOUND" ]] && LANGUAGES_FOUND="$LANGUAGES_FOUND,python" || LANGUAGES_FOUND="python"
            
            # Basic Python security patterns
            EXEC_COUNT=$(grep -r "exec(" --include="*.py" . | wc -l || echo "0")
            EVAL_COUNT=$(grep -r "eval(" --include="*.py" . | wc -l || echo "0")
            TOTAL_FINDINGS=$((TOTAL_FINDINGS + EXEC_COUNT + EVAL_COUNT))
          fi
          
          if find . -name "*.java" | head -1 | grep -q .; then
            JAVA_FILES=$(find . -name "*.java" | wc -l)
            TOTAL_FILES=$((TOTAL_FILES + JAVA_FILES))
            [[ -n "$LANGUAGES_FOUND" ]] && LANGUAGES_FOUND="$LANGUAGES_FOUND,java" || LANGUAGES_FOUND="java"
            
            # Basic Java security patterns
            RUNTIME_COUNT=$(grep -r "Runtime.getRuntime().exec" --include="*.java" . | wc -l || echo "0")
            TOTAL_FINDINGS=$((TOTAL_FINDINGS + RUNTIME_COUNT))
          fi
          
          SCAN_TYPE="fallback"
          
        else
          echo "üìÑ Found SARIF files, processing CodeQL results..."
          
          # Process all SARIF files
          TOTAL_FINDINGS=0
          LANGUAGES_FOUND=""
          
          for SARIF_FILE in $SARIF_FILES; do
            echo "Processing: $SARIF_FILE"
            
            # Count findings in this SARIF file
            FILE_FINDINGS=$(jq '[.runs[].results // []] | add | length' "$SARIF_FILE" 2>/dev/null || echo "0")
            TOTAL_FINDINGS=$((TOTAL_FINDINGS + FILE_FINDINGS))
            
            # Extract language from SARIF
            LANG=$(jq -r '.runs[0].tool.driver.name // "unknown"' "$SARIF_FILE" 2>/dev/null || echo "unknown")
            if [[ "$LANG" != "unknown" && "$LANG" != "null" ]]; then
              [[ -n "$LANGUAGES_FOUND" ]] && LANGUAGES_FOUND="$LANGUAGES_FOUND,$LANG" || LANGUAGES_FOUND="$LANG"
            fi
            
            echo "  - Language: $LANG"
            echo "  - Findings: $FILE_FINDINGS"
          done
          
          # Remove duplicates from languages
          LANGUAGES_FOUND=$(echo "$LANGUAGES_FOUND" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
          
          # Count total files scanned (estimate)
          TOTAL_FILES=$(find . -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" | wc -l)
          
          SCAN_TYPE="codeql"
        fi

        echo ""
        echo "üìä Scan Summary:"
        echo "- Type: $SCAN_TYPE"
        echo "- Languages: ${LANGUAGES_FOUND:-"none detected"}"
        echo "- Files: $TOTAL_FILES"
        echo "- Findings: $TOTAL_FINDINGS"

        # Just send the SARIF data directly - no extra clutter
        if [[ "$SCAN_TYPE" == "codeql" && -n "$SARIF_FILES" ]]; then
          FIRST_SARIF=$(echo "$SARIF_FILES" | head -1)
          if [[ -f "$FIRST_SARIF" ]]; then
            # Check file size to avoid issues (increase limit to 5MB)
            SARIF_SIZE=$(wc -c < "$FIRST_SARIF" 2>/dev/null || echo "0")
            if [[ "$SARIF_SIZE" -lt 5242880 ]]; then  # Less than 5MB
              echo "üìÑ Sending full SARIF data (${SARIF_SIZE} bytes)"
              cp "$FIRST_SARIF" feed_data.json
            else
              echo "‚ö†Ô∏è SARIF file too large (${SARIF_SIZE} bytes), creating summary"
              # Create a meaningful SARIF summary with key findings
              jq '{
                "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                "version": "2.1.0",
                "runs": [
                  {
                    "tool": (.runs[0].tool // {"driver": {"name": "CodeQL"}}),
                    "results": (.runs[0].results[0:20] // []),
                    "summary": {
                      "total_results": ([.runs[].results // []] | add | length),
                      "high_severity": ([.runs[].results // [] | .[] | select(.level == "error" or .properties.severity == "high")] | length),
                      "medium_severity": ([.runs[].results // [] | .[] | select(.level == "warning" or .properties.severity == "medium")] | length),
                      "note": "SARIF truncated - showing first 20 results only",
                      "original_size_bytes": '${SARIF_SIZE}'
                    }
                  }
                ]
              }' "$FIRST_SARIF" > feed_data.json 2>/dev/null || {
                # Fallback if jq processing fails
                jq -n --arg size "$SARIF_SIZE" --arg findings "$TOTAL_FINDINGS" '{
                  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [{
                    "tool": {"driver": {"name": "CodeQL"}},
                    "results": [],
                    "summary": {
                      "total_results": ($findings | tonumber),
                      "note": "SARIF file too large for processing",
                      "original_size_bytes": ($size | tonumber)
                    }
                  }]
                }' > feed_data.json
              }
            fi
          else
            echo "‚ö†Ô∏è No SARIF file found, sending empty result"
            jq -n '{
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "version": "2.1.0",
              "runs": [{
                "tool": {"driver": {"name": "CodeQL"}},
                "results": [],
                "summary": {"note": "No SARIF data available"}
              }]
            }' > feed_data.json
          fi
        else
          echo "‚ö†Ô∏è CodeQL failed, sending fallback result"
          jq -n \
            --arg total_findings "$TOTAL_FINDINGS" \
            --arg languages "${LANGUAGES_FOUND:-none}" \
            '{
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "version": "2.1.0",
              "runs": [{
                "tool": {"driver": {"name": "Fallback Scanner"}},
                "results": [],
                "summary": {
                  "fallback_scan": true,
                  "total_findings": ($total_findings | tonumber),
                  "languages": $languages,
                  "note": "CodeQL analysis failed - used pattern-based fallback"
                }
              }]
            }' > feed_data.json
        fi

        echo "üìä Prepared SARIF data for Augur feed"
        echo ""
        echo "üîç SARIF Data Being Sent:"
        echo "========================="
        echo "Event Type: security_scan_completed"
        echo "Source: github-security-scan"
        echo "Data Size: $(wc -c < feed_data.json) bytes"
        echo ""
        echo "üìã SARIF Preview (first 10 lines):"
        head -10 feed_data.json
        echo "..."

        # Set outputs
        echo "results_count=$TOTAL_FINDINGS" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        echo "languages_detected=${LANGUAGES_FOUND:-none}" >> $GITHUB_OUTPUT

        # SARIF data is saved to feed_data.json file
        # Subsequent steps will read this file directly (no output needed)

        # Final summary
        echo ""
        echo "üéØ Final Summary:"
        echo "Repository: ${{ github.repository }}"
        echo "Languages: ${LANGUAGES_FOUND:-none}"
        echo "Findings: $TOTAL_FINDINGS"
        echo "Scan Type: $SCAN_TYPE"
        if [[ "$CODEQL_SUCCESS" == "false" ]]; then
          echo "CodeQL Status: Failed (used fallback scan)"
        else
          echo "CodeQL Status: Success"
        fi

        # Only fail on issues if explicitly requested AND we have findings
        if [[ "${{ inputs.fail_on_issues }}" == "true" && $TOTAL_FINDINGS -gt 0 ]]; then
          echo "‚ùå Failing due to security findings (fail_on_issues=true)"
          exit 1
        fi

        if [[ "$CODEQL_SUCCESS" == "false" ]]; then
          echo "‚ö†Ô∏è Security scan completed with fallback (CodeQL issues ignored)"
        else
          echo "‚úÖ Security scan completed successfully!"
        fi

    - name: Validate Feed Data
      if: inputs.api_url != '' && inputs.api_key != '' && inputs.feed_id != ''
      shell: bash
      run: |
        echo "üîç Validating feed data before sending..."

        # Check if feed_data.json exists and is valid JSON
        if [[ -f "feed_data.json" ]]; then
          echo "‚úÖ Feed data file exists"
          
          # Test JSON validity
          if jq empty feed_data.json 2>/dev/null; then
            echo "‚úÖ Feed data is valid JSON"
            
            # Check if it's valid SARIF (has required fields)
            if jq -e '.version and .runs' feed_data.json >/dev/null 2>&1; then
              echo "‚úÖ Feed data appears to be valid SARIF"
            else
              echo "‚ö†Ô∏è Feed data doesn't look like standard SARIF (missing version or runs)"
            fi
            
            # Show data size
            DATA_SIZE=$(wc -c < feed_data.json)
            echo "üìè Feed data size: $DATA_SIZE bytes"
            
            # Show first few lines for debugging
            echo "üîç First 3 lines of feed data:"
            head -3 feed_data.json
            
          else
            echo "‚ùå Feed data is not valid JSON!"
            echo "Raw content (first 200 chars):"
            head -c 200 feed_data.json
          fi
        else
          echo "‚ùå Feed data file not found!"
        fi
        echo ""

    - name: Minimize SARIF for Transport
      if: inputs.api_url != '' && inputs.api_key != '' && inputs.feed_id != ''
      uses: augur-ai/augur-actions/actions/augur-sarif-minimizer@main
      with:
        input_sarif: feed_data.json
        output_sarif: feed_data.min.json
        keep_original: true

    - name: Read SARIF Data for Feed Update
      id: read-data
      if: inputs.api_url != '' && inputs.api_key != '' && inputs.feed_id != ''
      shell: bash
      run: |
        if [[ -f "feed_data.min.json" ]]; then
          echo "üìñ Reading minimized SARIF data for feed update..."
          SARIF_CONTENT=$(cat feed_data.min.json)
          echo "sarif_content=$SARIF_CONTENT" >> $GITHUB_OUTPUT
          echo "‚úÖ SARIF data prepared for feed update"
        else
          echo "‚ùå feed_data.min.json not found!"
          exit 1
        fi

    - name: Send Augur Feed Update
      id: feed-update
      if: inputs.api_url != '' && inputs.api_key != '' && inputs.feed_id != ''
      uses: augur-ai/augur-actions/actions/augur-feed-update@main
      with:
        api_url: ${{ inputs.api_url }}
        api_key: ${{ inputs.api_key }}
        feed_id: ${{ inputs.feed_id }}
        event_type: "security_scan_completed"
        event_data: ${{ toJSON(fromJSON(steps.read-data.outputs.sarif_content)) }}
        raw_data_mode: true

    - name: Display Event Delivery Status
      if: always()
      shell: bash
      env:
        API_URL: ${{ inputs.api_url }}
        API_KEY: ${{ inputs.api_key }}
        FEED_ID: ${{ inputs.feed_id }}
      run: |
        echo ""
        echo "üì§ Augur Event Delivery Summary:"
        echo "==============================="
        if [[ "$API_URL" != "" && "$API_KEY" != "" && "$FEED_ID" != "" ]]; then
          echo "üéØ Target: $API_URL/api/v1/webhook/feed/events/$FEED_ID"
          echo "üì¶ Event Type: security_scan_completed"
          echo "üîë API Key: [CONFIGURED - ${#API_KEY} chars]"
          echo "üìä Feed Update Step Status: ${{ steps.feed-update.outcome }}"
          echo "üìã Feed Update Success: ${{ steps.feed-update.outputs.success }}"
          echo "üåê Status Code: ${{ steps.feed-update.outputs.status_code }}"
          echo "üìù Response Body: ${{ steps.feed-update.outputs.response_body }}"
          echo "üì¶ Event ID: ${{ steps.feed-update.outputs.event_id }}"
          echo ""
          echo "üîç Debug Info:"
          echo "- API URL length: ${#API_URL} chars"
          echo "- Feed ID length: ${#FEED_ID} chars"
          echo "- Original SARIF size: $(wc -c < feed_data.json 2>/dev/null || echo 'unknown') bytes"
          echo "- Minimized SARIF size: $(wc -c < feed_data.min.json 2>/dev/null || echo 'unknown') bytes"
          echo ""
          if [[ "${{ steps.feed-update.outputs.success }}" == "true" ]]; then
            echo "‚úÖ Event successfully delivered to Augur!"
          else
            echo "‚ùå Event delivery failed"
            echo "   Check the details above for the specific error"
            echo "   Common issues:"
            echo "   - Invalid API key or URL"
            echo "   - Feed ID doesn't exist"
            echo "   - Network connectivity issues"
            echo "   - Data payload too large or malformed"
          fi
        else
          echo "‚è≠Ô∏è  Augur integration not configured (skipped)"
          echo "   Missing inputs:"
          [[ -z "${{ inputs.api_url }}" ]] && echo "   - api_url"
          [[ -z "${{ inputs.api_key }}" ]] && echo "   - api_key" 
          [[ -z "${{ inputs.feed_id }}" ]] && echo "   - feed_id"
        fi
        echo ""
