name: Example SARIF Minimizer Usage

on:
  workflow_dispatch:

jobs:
  test-minimizer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Sample SARIF
        run: |
          echo "Creating sample SARIF file for testing..."
          cat > sample.sarif << 'EOF'
          {
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "CodeQL",
                    "version": "2.0.0"
                  }
                },
                "results": [
                  {
                    "rule": {
                      "id": "js/sql-injection",
                      "name": "SQL Injection",
                      "helpUri": "https://security.example.com/sql-injection"
                    },
                    "level": "error",
                    "message": {
                      "text": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user."
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/database.js"
                          }
                        }
                      }
                    ],
                    "properties": {
                      "security-severity": "8.8",
                      "tags": ["security", "external/cwe/cwe-89"]
                    }
                  },
                  {
                    "rule": {
                      "id": "js/xss",
                      "name": "Cross-site Scripting",
                      "helpUri": "https://security.example.com/xss"
                    },
                    "level": "warning",
                    "message": {
                      "text": "Writing user input directly to the DOM allows for a cross-site scripting vulnerability."
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/ui.js"
                          }
                        }
                      }
                    ],
                    "properties": {
                      "security-severity": "7.5",
                      "tags": ["security", "external/cwe/cwe-79"]
                    }
                  }
                ]
              }
            ]
          }
          EOF

          echo "✅ Sample SARIF created:"
          ls -la sample.sarif
          echo "📏 Size: $(wc -c < sample.sarif) bytes"

      - name: Basic Minimization
        uses: ./
        with:
          input_sarif: sample.sarif
          output_sarif: basic_minimal.sarif

      - name: Check Basic Results
        run: |
          echo "📊 Basic minimization results:"
          echo "Original: $(wc -c < sample.sarif) bytes"
          echo "Minimal: $(wc -c < basic_minimal.sarif) bytes"
          echo "Compression: ${{ steps.basic-minimization.outputs.compression_ratio }}%"

      - name: Advanced Minimization
        uses: ./
        with:
          input_sarif: sample.sarif
          output_sarif: advanced_minimal.sarif
          keep_original: true

      - name: Check Advanced Results
        run: |
          echo "📊 Advanced minimization results:"
          echo "Original: $(wc -c < sample.sarif) bytes (kept)"
          echo "Minimal: $(wc -c < advanced_minimal.sarif) bytes"
          echo "Compression: ${{ steps.advanced-minimization.outputs.compression_ratio }}%"

      - name: Verify SARIF Validity
        run: |
          echo "🔍 Verifying minimal SARIF structure..."

          # Check if it's valid JSON
          if jq empty basic_minimal.sarif 2>/dev/null; then
            echo "✅ Basic minimal SARIF is valid JSON"
          else
            echo "❌ Basic minimal SARIF is not valid JSON"
            exit 1
          fi

          # Check if it has required SARIF fields
          if jq -e '.version and .runs and .runs[0].results' basic_minimal.sarif >/dev/null 2>&1; then
            echo "✅ Basic minimal SARIF has required structure"
          else
            echo "❌ Basic minimal SARIF missing required structure"
            exit 1
          fi

          # Check if it has essential finding data
          if jq -e '.runs[0].results[0].ruleId and .runs[0].results[0].locations[0].physicalLocation.artifactLocation.uri' basic_minimal.sarif >/dev/null 2>&1; then
            echo "✅ Basic minimal SARIF has essential finding data"
          else
            echo "❌ Basic minimal SARIF missing essential finding data"
            exit 1
          fi

          echo "🎉 All validation checks passed!"

  integration-example:
    runs-on: ubuntu-latest
    needs: test-minimizer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Large SARIF
        run: |
          echo "Creating a larger SARIF file to demonstrate compression..."

          # Create a SARIF with many findings
          jq -n '{
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [{
              "tool": {"driver": {"name": "CodeQL"}},
              "results": [
                range(100) | {
                  "rule": {
                    "id": "js/rule-\(.)",
                    "name": "Rule \(.)",
                    "helpUri": "https://example.com/rule-\(.)",
                    "help": "This is a very long help text that explains the rule in detail with examples and references to security standards and best practices..."
                  },
                  "level": "warning",
                  "message": {
                    "text": "This is a security finding with a very long description that includes detailed explanations, examples, and recommendations for fixing the vulnerability..."
                  },
                  "locations": [{
                    "physicalLocation": {
                      "artifactLocation": {
                        "uri": "src/file\(.).js"
                      }
                    }
                  }],
                  "properties": {
                    "security-severity": "7.5",
                    "tags": ["security", "external/cwe/cwe-79"],
                    "additional-metadata": "This is additional metadata that gets removed during minimization..."
                  }
                }
              ]
            }]
          }' > large.sarif

          echo "✅ Large SARIF created:"
          ls -la large.sarif
          echo "📏 Size: $(wc -c < large.sarif) bytes"

      - name: Minimize Large SARIF
        uses: ./
        with:
          input_sarif: large.sarif
          output_sarif: minimal_large.sarif

      - name: Show Compression Results
        run: |
          echo "📊 Large SARIF compression results:"
          echo "Original: $(wc -c < large.sarif) bytes"
          echo "Minimal: $(wc -c < minimal_large.sarif) bytes"
          echo "Compression: ${{ steps.minimize-large-sarif.outputs.compression_ratio }}%"

          # Show file size difference
          ORIG_SIZE=$(wc -c < large.sarif)
          MIN_SIZE=$(wc -c < minimal_large.sarif)
          SAVINGS=$((ORIG_SIZE - MIN_SIZE))
          echo "💾 Space saved: $SAVINGS bytes"

          # Show what's preserved
          echo ""
          echo "🔍 Essential data preserved:"
          jq -r '.runs[0].results[0:3] | .[] | "  - \(.ruleId): \(.locations[0].physicalLocation.artifactLocation.uri)"' minimal_large.sarif
