name: "Post Feed Update"
description: "Posts a notification to API feed"
author: "augur-ai"

inputs:
  api_url:
    description: "API URL"
    required: true
  api_key:
    description: "API Key for authentication"
    required: true
  feed_id:
    description: "Feed ID to post to"
    required: true
  body:
    description: "Content body in Markdown format"
    required: true
  level:
    description: "Notification level (INFO, WARNING, ERROR)"
    required: false
    default: "INFO"
  topics:
    description: "JSON string of topics to include in the notification"
    required: false
    default: "{}"

outputs:
  post_id:
    description: "ID of the created post"
    value: ${{ steps.post.outputs.post_id }}
  status_code:
    description: "HTTP status code from the API request"
    value: ${{ steps.post.outputs.status_code }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      id: validate
      shell: bash
      run: |
        if [[ -z "${{ inputs.api_url }}" || -z "${{ inputs.api_key }}" || -z "${{ inputs.feed_id }}" || -z "${{ inputs.body }}" ]]; then
          echo "❌ Required inputs are missing (api_url, api_key, feed_id, or body)"
          exit 1
        fi

    - name: Post to API
      id: post
      shell: bash
      run: |
        # Prepare the payload - unescape the body content if needed
        BODY="${{ inputs.body }}"

        # Write the content to a temporary file and then read it properly to handle escaping
        echo -e "${BODY//'%25'/'%'}" > temp_body.txt
        FORMATTED_BODY=$(cat temp_body.txt)

        # Handle the topics JSON safely - Create a default if invalid
        TOPICS='${{ inputs.topics }}'

        if ! echo "$TOPICS" | jq empty 2>/dev/null; then
          echo "Warning: Invalid JSON in topics parameter, using empty object"
          TOPICS="{}"
        fi

        # Create JSON payload using jq with the correct format
        jq -n \
          --arg body "$FORMATTED_BODY" \
          --arg level "${{ inputs.level }}" \
          --arg feed_id "${{ inputs.feed_id }}" \
          --argjson topics "$TOPICS" \
          '{
            "body": $body,
            "topics": $topics,
            "level": $level,
            "feed_ids": [$feed_id]
          }' > payload.json

        echo "Sending notification to API..."
        echo "Using endpoint: ${{ inputs.api_url }}/api/v1/posts/"

        # Use wget for API request
        RESPONSE=$(wget --quiet \
          --method POST \
          --header 'Content-Type: application/json' \
          --header "x-api-key: ${{ inputs.api_key }}" \
          --body-file=payload.json \
          --output-document - \
          --server-response \
          "${{ inputs.api_url }}/api/v1/posts/" 2>&1)

        # Extract status code
        STATUS_CODE=$(echo "$RESPONSE" | grep "HTTP/" | awk '{print $2}' | tail -1)
        # Extract response body
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '1,/^$/d')

        echo "API response status code: $STATUS_CODE"
        echo "API response body: $RESPONSE_BODY"

        # Save status code to output
        echo "status_code=$STATUS_CODE" >> $GITHUB_OUTPUT

        # Try to extract the post ID from response if successful
        if [[ "$STATUS_CODE" -ge 200 && "$STATUS_CODE" -lt 300 ]]; then
          POST_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // "unknown"')
          echo "post_id=$POST_ID" >> $GITHUB_OUTPUT
          echo "✅ Notification sent successfully with ID: $POST_ID"
        else
          echo "❌ Failed to send notification. Status code: $STATUS_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
