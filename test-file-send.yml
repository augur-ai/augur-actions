name: Test File Send Step

on:
  workflow_dispatch:

jobs:
  test-file-send:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Test File
        run: |
          echo "Creating test SARIF file..."
          cat > test_data.json << 'EOF'
          {
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {"driver": {"name": "Test Scanner"}},
                "results": [
                  {
                    "message": {"text": "Test finding"},
                    "level": "warning"
                  }
                ]
              }
            ]
          }
          EOF
          echo "‚úÖ Test file created:"
          ls -la test_data.json
          echo "üìè File size: $(wc -c < test_data.json) bytes"

      - name: Test Send File
        env:
          API_URL: "https://internal.getaugur.ai"
          API_KEY: "c26e753f1308311d5852571614849c3a10f5d85fb0aa37b69c96539b4b55d982e933e9f642ea0df4f2af0d846bbd921b"
          FEED_ID: "f62e7134-90db-4ce1-8b50-91cbe8a508dc"
        run: |
          echo "üì§ Testing file send logic..."

          if [[ -f "test_data.json" ]]; then
            echo "‚úÖ Test file exists"
            
            # Check file size
            FILE_SIZE=$(wc -c < test_data.json)
            echo "üìè File size: $FILE_SIZE bytes"
            
            echo "üåê Sending to: $API_URL/api/v1/webhook/feed/events/$FEED_ID"
            echo "üîë API Key: [CONFIGURED - ${#API_KEY} chars]"
            
            # Read the test data and send it as JSON in the request body
            TEST_DATA_CONTENT=$(cat test_data.json)
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              --location "$API_URL/api/v1/webhook/feed/events/$FEED_ID" \
              --header "Content-Type: application/json" \
              --header "x-api-key: $API_KEY" \
              --data "$TEST_DATA_CONTENT" \
              --max-time 30 \
              --retry 3 \
              --retry-delay 1 2>&1)
            
            # Extract status code and response body
            STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "üì• Response Status: $STATUS_CODE"
            echo "üìù Response Body: $RESPONSE_BODY"
            
            if [[ "$STATUS_CODE" -ge 200 && "$STATUS_CODE" -lt 300 ]]; then
              echo "‚úÖ Test data sent successfully!"
            else
              echo "‚ùå Failed to send test data (Status: $STATUS_CODE)"
              echo "Response: $RESPONSE_BODY"
              exit 1
            fi
            
            echo "‚úÖ File send logic test completed successfully!"
          else
            echo "‚ùå Test file not found!"
            exit 1
          fi
